name: Periodically rebuild & publish containers (auto update)

on:
  schedule:
    # run once a day at 22:20 UTC
    - cron: '20 22 * * *'

concurrency: build

env:
  CI_TOOLS_SETUP: https://raw.githubusercontent.com/SGSGermany/ci-tools/main/setup.sh

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        BUILD_REF:
          - refs/heads/main
      fail-fast: false
      max-parallel: 1

    env:
      REGISTRY: ghcr.io
      OWNER: sgsgermany
      IMAGE: weechat
      BUILD_REF: ${{ matrix.BUILD_REF }}

    steps:
      - name: Setup CI tools
        run: |
          . <(curl -fsS -L "$CI_TOOLS_SETUP" | bash -s ~/ci-tools)
          echo "CI_TOOLS=$CI_TOOLS" | tee -a "$GITHUB_ENV"
          echo "CI_TOOLS_PATH=$CI_TOOLS_PATH" | tee -a "$GITHUB_ENV"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BUILD_REF }}

      - name: Log into container registry ${{ env.REGISTRY }}
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate container image tags
        run: |
          source <(./tags.sh "$GITHUB_RUN_ID.$GITHUB_RUN_NUMBER")
          echo "VERSION=${VERSION:-}" | tee -a "$GITHUB_ENV"
          echo "TAGS=${TAGS:-latest}" | tee -a "$GITHUB_ENV"

      - name: Check for updates
        run: |
          BUILD_ACTION="$(./check-for-updates.sh)"
          echo "BUILD_ACTION=$BUILD_ACTION" | tee -a "$GITHUB_ENV"

      - name: Build container image
        if: ${{ env.BUILD_ACTION != '' }}
        run: |
          buildah unshare ./build.sh

      - name: Container image metadata
        run: |
          "$CI_TOOLS_PATH/containers/get-metadata.sh" "$REGISTRY/$OWNER" "$IMAGE:latest"

      - name: Push container image
        if: ${{ env.BUILD_ACTION != '' }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.IMAGE }}
          registry: ${{ env.REGISTRY }}/${{ env.OWNER }}
          tags: ${{ env.TAGS }}
